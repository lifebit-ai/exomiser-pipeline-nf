manifest {
    name        = 'lifebit-ai/exomiser-nf'
    description = 'A pipeline to perform variant prioritisation'
    mainScript  = 'main.nf'
    version     = 'v2.0'
}

includeConfig 'conf/customised_pipeline_resources.config'

docker.enabled = true

params {
  raci_owner        = "Lifebit"

  // Exomiser specific parameters
  reference_data_bucket = "s3://lifebit-featured-datasets"
  bucket_pattern = "lifebit-featured-datasets"
  exomiser_variant_fields = null
  mock_exomiser = false
  mock_exomiser_output_https_url = 'https://gist.githubusercontent.com/cgpu/dd028eb70af68f8fe0791ba3cff09242/raw/93e5bb37de7e8c53e054d7791b5363b0019c7645/exomiser.variants.tsv'
  outdir = 'results'
  input = null
  filename_hpo = ''
  sample_name = null
  config = 'conf/executors/standard.config'
  exomiser_profile_files = 'full' // 'test' for small mock data, 'full' for full data (120GB)
  data_bundle = null
  exomiser_phenotype_data = null
  cadd_snvs = null
  phenix_data = null
  application_properties = "${params.reference_data_bucket}/pipelines/exomiser-nf/application.properties"
  auto_config_yml = "${params.reference_data_bucket}/pipelines/exomiser-nf/auto_config_v2.yml"
  hpo_terms_file = false
  modes_of_inheritance = 'AUTOSOMAL_DOMINANT,AUTOSOMAL_RECESSIVE,X_RECESSIVE,UNDEFINED'
  prioritisers = 'hiPhivePrioritiser,phivePrioritiser,phenixPrioritiser'
  pathogenicity_sources = 'POLYPHEN,MUTATION_TASTER,SIFT'
  keep_non_pathogenic = false
  min_priority_score = 0.501
  keep_non_pathogenic = false
  analysis_mode = 'PASS_ONLY'
  exomiser_version = '12.1.0'
  exomiser_data_directory = '/data/exomiser-data-bundle'

  //inputs
  families_file = false

  // Debugging related parameters
  debug_script = "ls -l"
  echo = false
  errorStrategy = 'terminate'

  // container versions
  exomiser_container_tag = '12.1.0'
  cloudos_cli_container_tag = '0.0.2'

     queueSize = 200
    executor = false

    // AWS batch
    aws_region = 'eu-west-1'
    aws_batch_default_queue = "optimal-instance-1tb-ami-on-demand-queue"
    aws_batch_cli_path = '/home/ec2-user/miniconda/bin/aws' 
    aws_batch_fetch_instance_type = true
    aws_batch_max_parallel_transfers = 2
    aws_batch_volumes = '/home/ec2-user/.aws:/root/.aws'

  //process resources
  memory = 6.GB  
  cpus = 4
  maxForks = 1
  //submitRateLimit = '1/5min'
  errorStrategy = 'retry'
  maxRetries = 3
}

includeConfig 'conf/containers/quay.config'
//includeConfig 'conf/data/data.config' // Loads in data


profiles {
   standard { includeConfig params.config }
   awsbatch { includeConfig 'conf/executors/awsbatch.config' }
   eu_west_1 { includeConfig 'conf/cloud-region/eu_west_1.config' }
   eu_west_2 { includeConfig 'conf/cloud-region/eu_west_2.config' }
   test_full { includeConfig "conf/tests/full/test_full.config" }
   test_full_family { includeConfig 'conf/tests/full/test_full_family.config' }
   test_full_single_vcf { includeConfig 'conf/tests/full/test_full_single_vcf.config' }
   test_full_multi_hpo { includeConfig 'conf/tests/full/test_full_multi_hpo.config' }
   ci_test_data { includeConfig "conf/tests/ci/ci_test_data.config" }
   singularity { includeConfig 'conf/executors/singularity.config' }
   dockerhub { includeConfig 'conf/containers/dockerhub.config' }
   quay { includeConfig 'conf/containers/quay.config' }
   ecr { includeConfig 'conf/containers/ecr.config' }
}

includeConfig 'conf/resources.config'
includeConfig 'conf/data/data.config'

process {
  echo = params.echo
  errorStrategy = params.errorStrategy
  withName: exomiser {
    container = params.main_container
    containerOptions = "--volume ${params.exomiser_data_directory}:/data/"
    memory = params.memory
    cpus = params.cpus
    maxForks = params.maxForks
    //submitRateLimit = params.submitRateLimit
    errorStrategy = params.errorStrategy
    maxRetries = params.maxRetries
  }
}


executor {
    name = params.executor
    queueSize = params.queueSize
}